// Copyright (C) Geom Software e.U, Bernhard Kornberger, Graz/Austria
//
// This file is part of the Fade2D library. The student license is free
// of charge and covers personal non-commercial research. Licensees
// holding a commercial license may use this file in accordance with
// the Commercial License Agreement.
//
// This software is provided AS IS with NO WARRANTY OF ANY KIND,
// INCLUDING THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE.
//
// Please contact the author if any conditions of this licensing are
// not clear to you.
//
// Author: Bernhard Kornberger, bkorn (at) geom.at
// http://www.geom.at

#pragma once

// NOMINMAX for Windows
#ifdef _MSC_VER
#ifndef NOMINMAX
#define NOMINMAX
#endif
#endif


#include <assert.h>
#include <math.h>
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <set>
#include <float.h>
#include <stdio.h>
#include <stdlib.h>
#include <iterator>
#include <exception>
// When the library is built, a static local version of this file is
// used. When the client software uses this file, it is generated by
// CMake.
#include "fadeVersion.h"




//#define DEVMODE
#ifdef _WIN32
	#ifdef DEVMODE
		pragma error "DEVMODE IN WIN32"
	#endif
#endif

const size_t MT_THRESHOLD(1000);

// DLL IMPORT/EXPORT MACRO
#if defined (_WIN32)
	// ** WINDOWS **
	#if defined(FADE2D_EXPORT)
		#define  CLASS_DECLSPEC __declspec(dllexport)
		#define  FUNC_DECLSPEC __declspec(dllexport)
		//#define  FUNC_DECLSPEC extern "C" __declspec(dllexport)
	#else
		#define  CLASS_DECLSPEC __declspec(dllimport)
		#define  FUNC_DECLSPEC __declspec(dllimport)
	#endif
#else
	// ** LINUX / MAC **
	#define CLASS_DECLSPEC
	#define FUNC_DECLSPEC
#endif





//#define GEOM_BENCHCOUNTING
#ifdef GEOM_BENCHCOUNTING
		#define BC(x) benchCounter(x);
#else
		#define BC(x)
#endif



// NAMESPACE (for Doxygen)
#if GEOM_PSEUDO3D==GEOM_TRUE
/**
 * @namespace GEOM_FADE25D
 * GEOM_FADE25D is the namespace of the 2.5D version of Fade
 */
	namespace GEOM_FADE25D {
#elif GEOM_PSEUDO3D==GEOM_FALSE
/**
 * @namespace GEOM_FADE2D
 * GEOM_FADE2D is the namespace of the 2D version of Fade
 */
	namespace GEOM_FADE2D {
#else
	#error GEOM_PSEUDO3D is not defined
#endif



/** \brief Empty class. Used as marker for experimental features
*
* New features are necessarily part of the API. To protect users
* from code which may change or even disappear in future releases
* this class is used as tag. By using it you say "I know what I'm
* doing".
*/

class CLASS_DECLSPEC AcceptExperimentalFeature{};

enum ZoneLocation
{
	ZL_GLOBAL,
	ZL_INSIDE,
	ZL_OUTSIDE,
	ZL_GROW,
	ZL_RESULT_UNION,
	ZL_RESULT_INTERSECTION,
	ZL_RESULT_DIFFERENCE,
	ZL_RESULT_SYM_DIFFERENCE,
	ZL_BOUNDED
};

enum Orientation2
{
	ORIENTATION2_COLLINEAR,
	ORIENTATION2_CCW,
	ORIENTATION2_CW
};

enum Orientation3
{
	ORIENTATION3_COPLANAR,
	ORIENTATION3_POSITIVE,
	ORIENTATION3_NEGATIVE
};


template<class T_PTR> struct func_ltDerefPtr
{
	bool operator()(T_PTR p0,T_PTR p1) const {return *p0<*p1;}
};




struct FadeException: public std::exception
{
  virtual const char* what() const throw()
  {
		return "\n  FADE EXCEPTION due to a bug _or_ wrong usage of Fade. If you think it is a \n  bug then please report this incident and it will be fixed quickly: bkorn@geom.at";
  }
};
struct FadeLicenseException: public std::exception
{
  virtual const char* what() const throw()
  {
		return "Fade: Your program used an unlicensed feature, sorry.";
  }
};





} // (namespace)

