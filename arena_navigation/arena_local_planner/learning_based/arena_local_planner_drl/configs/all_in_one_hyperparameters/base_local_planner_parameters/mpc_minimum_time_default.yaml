local_planner_type: "mpc_local_planner/MpcLocalPlannerROS"
local_planner_name: "mpc_local_planner"
min_tolerated_x_vel: 0.05 # If linear velocity is below this threshold costmap will be resetted as it assumed that the robot is stuck
max_time_between_resets: 1 # Max time in s between two costmap resets.
reset_costmap_automatically: False
reset_costmap_interval: 5  # Time between automatic costmap resets in seconds

mpc_local_planner:
  # Costmap converter plugin
  costmap_converter_plugin: "costmap_converter::CostmapToPolygonsDBSMCCH"
  costmap_converter_spin_thread: True
  costmap_converter_rate: 20

  ## Robot settings
  robot:
    type: "unicycle"
    unicycle:
      max_vel_x: 0.3
      max_vel_x_backwards: 0.0
      max_vel_theta: 2.7
      acc_lim_x: 0.0 # deactive bounds with zero
      dec_lim_x: 0.0 # deactive bounds with zero
      acc_lim_theta: 0.2 # deactivate bounds with zero

  ## Footprint model for collision avoidance
  footprint_model:
    type: "circular"
    is_footprint_dynamic: False
    radius: 0.3

  ## Collision avoidance
  collision_avoidance:
    min_obstacle_dist: 0.5
    enable_dynamic_obstacles: False
    force_inclusion_dist: 0.5
    cutoff_dist: 2.5
    include_costmap_obstacles: False
    costmap_obstacles_behind_robot_dist: 1.5

  ## Planning grid
  grid:
    type: "fd_grid"
    grid_size_ref: 20
    dt_ref: 0.3
    xf_fixed: [ True, True, True ]
    warm_start: True
    collocation_method: "forward_differences"
    cost_integration_method: "left_sum"
    variable_grid:
      enable: True
      min_dt: 0.0;
      max_dt: 10.0;
      grid_adaptation:
        enable: True
        dt_hyst_ratio: 0.1
        min_grid_size: 2
        max_grid_size: 50

  ## Planning options
  planning:
    objective:
      type: "minimum_time" # minimum_time requires grid/variable_grid/enable=True and grid/xf_fixed set properly
      quadratic_form:
        state_weights: [ 2.0, 2.0, 2.0 ]
        control_weights: [ 1.0, 1.0 ]
        integral_form: False
      minimum_time_via_points:
        position_weight: 10.5
        orientation_weight: 0.0
        via_points_ordered: False
    terminal_cost:
      type: "none" # can be "none"
      quadratic:
        final_state_weights: [ 2.0, 2.0, 2.0 ]
    terminal_constraint:
      type: "none" # can be "none"
      l2_ball:
        weight_matrix: [ 1.0, 1.0, 1.0 ]
        radius: 5

  ## Controller options
  controller:
    outer_ocp_iterations: 5
    xy_goal_tolerance: 0.3
    yaw_goal_tolerance: 4 # Orientation at goal is irrelevant
    global_plan_overwrite_orientation: true
    global_plan_prune_distance: 1.0
    allow_init_with_backward_motion: False
    max_global_plan_lookahead_dist: 3.5
    global_plan_viapoint_sep: 5.5
    force_reinit_new_goal_dist: 1.0
    force_reinit_new_goal_angular: 1.57
    force_reinit_num_steps: 0
    prefer_x_feedback: False
    publish_ocp_results: False

  ## Solver settings
  solver:
    type: "ipopt"
    ipopt:
      iterations: 100
      max_cpu_time: -1.0
      ipopt_numeric_options:
        tol: 1e-4
      ipopt_string_options:
        linear_solver: "mumps"
        hessian_approximation: "exact" # exact or limited-memory
    lsq_lm:
      iterations: 10
      weight_init_eq: 2
      weight_init_ineq: 2
      weight_init_bounds: 2
      weight_adapt_factor_eq: 1.5
      weight_adapt_factor_ineq: 1.5
      weight_adapt_factor_bounds: 1.5
      weight_adapt_max_eq: 500
      weight_adapt_max_ineq: 500
      weight_adapt_max_bounds: 500

local_costmap:
  update_frequency: 20.0
  publish_frequency: 1 # Publishing only relevant for visualization

  rolling_window: true
  width: 7 # 2x laser scan range
  height: 7
  resolution: 0.1
  transform_tolerance: 0.3 # allowed delay for the tf data

  obstacle_layer:
    obstacle_range: 3.5
    # Raytrace range has to be larger than laser range + 1 in order to correctly track dynamic obstacles with the filtered
    # scan messages.
    raytrace_range: 5
    robot_radius: 0.3
    inflation_radius: 0.3 # Use low inflation radius as goals might spawn close to obstacles
    map_type: costmap

    observation_sources: scan
    scan: { data_type: LaserScan, marking: true, topic: scan, clearing: true }

  inflation_layer:
    inflation_radius: 0.3

  plugins:
    - { name: inflation_layer,     type: "costmap_2d::InflationLayer" }
    - { name: obstacle_layer,      type: "costmap_2d::ObstacleLayer" }